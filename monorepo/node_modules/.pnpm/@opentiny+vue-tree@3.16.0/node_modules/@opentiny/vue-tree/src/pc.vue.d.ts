declare const _default: import("@vue/runtime-core").DefineComponent<Readonly<{
    props?: any;
    data?: any;
    size?: any;
    load?: any;
    checkStrictly?: any;
    tiny_mode?: any;
    tiny_mode_root?: any;
    tiny_template?: any;
    tiny_renderless?: any;
    _constants?: any;
    tiny_theme?: any;
    tiny_chart_theme?: any;
    icon?: any;
    draggable?: any;
    renderContent?: any;
    dataset?: any;
    lazy?: any;
    currentNodeKey?: any;
    defaultExpandedKeys?: any;
    autoExpandParent?: any;
    checkDescendants?: any;
    filterNodeMethod?: any;
    defaultCheckedKeys?: any;
    afterLoad?: any;
    nodeKey?: any;
    defaultExpandAll?: any;
    theme?: any;
    accordion?: any;
    parentKey?: any;
    indent?: any;
    viewType?: any;
    allowDrag?: any;
    allowDrop?: any;
    checkOnClickNode?: any;
    defaultExpandedKeysHighlight?: any;
    emptyText?: any;
    expandIcon?: any;
    expandOnClickNode?: any;
    highlightCurrent?: any;
    iconTriggerClickNode?: any;
    renderAfterExpand?: any;
    showCheckbox?: any;
    showContextmenu?: any;
    showRadio?: any;
    showNumber?: any;
    collapsible?: any;
    showCheckEasily?: any;
    nodeHeight?: any;
    shrinkIcon?: any;
    expandIconColor?: any;
    shrinkIconColor?: any;
    deleteDisabledKeys?: any;
    editDisabledKeys?: any;
    addDisabledKeys?: any;
    showAuxi?: any;
    pathSplit?: any;
    filterPlainMethod?: any;
    lazyCurrent?: any;
    baseIndent?: any;
    deleteNodeMethod?: any;
    showCheckedMark?: any;
    willChangeView?: any;
    onlyCheckChildren?: any;
    showLine?: any;
}>, {
    t: (this: any, path: any, options?: any) => any;
    vm: any;
    f: (props: any, attrs?: {}) => {};
    a: (attrs: any, filters: any, include: any) => {};
    d: (props: any) => void;
    dp: (props: any) => void;
    gcls: (key: any) => any;
}, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, ("check" | "node-expand" | "closeMenu" | "current-change" | "leave-plain-view" | "check-plain" | "check-change" | "node-drag-start" | "node-drag-enter" | "node-drag-over" | "node-drag-end" | "node-drop" | "node-click" | "load-data" | "node-drag-leave" | "add-node" | "edit-node" | "delete-node" | "open-edit" | "close-edit" | "save-edit")[], "check" | "node-expand" | "closeMenu" | "current-change" | "leave-plain-view" | "check-plain" | "check-change" | "node-drag-start" | "node-drag-enter" | "node-drag-over" | "node-drag-end" | "node-drop" | "node-click" | "load-data" | "node-drag-leave" | "add-node" | "edit-node" | "delete-node" | "open-edit" | "close-edit" | "save-edit", import("@vue/runtime-core").PublicProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<Readonly<{
    props?: any;
    data?: any;
    size?: any;
    load?: any;
    checkStrictly?: any;
    tiny_mode?: any;
    tiny_mode_root?: any;
    tiny_template?: any;
    tiny_renderless?: any;
    _constants?: any;
    tiny_theme?: any;
    tiny_chart_theme?: any;
    icon?: any;
    draggable?: any;
    renderContent?: any;
    dataset?: any;
    lazy?: any;
    currentNodeKey?: any;
    defaultExpandedKeys?: any;
    autoExpandParent?: any;
    checkDescendants?: any;
    filterNodeMethod?: any;
    defaultCheckedKeys?: any;
    afterLoad?: any;
    nodeKey?: any;
    defaultExpandAll?: any;
    theme?: any;
    accordion?: any;
    parentKey?: any;
    indent?: any;
    viewType?: any;
    allowDrag?: any;
    allowDrop?: any;
    checkOnClickNode?: any;
    defaultExpandedKeysHighlight?: any;
    emptyText?: any;
    expandIcon?: any;
    expandOnClickNode?: any;
    highlightCurrent?: any;
    iconTriggerClickNode?: any;
    renderAfterExpand?: any;
    showCheckbox?: any;
    showContextmenu?: any;
    showRadio?: any;
    showNumber?: any;
    collapsible?: any;
    showCheckEasily?: any;
    nodeHeight?: any;
    shrinkIcon?: any;
    expandIconColor?: any;
    shrinkIconColor?: any;
    deleteDisabledKeys?: any;
    editDisabledKeys?: any;
    addDisabledKeys?: any;
    showAuxi?: any;
    pathSplit?: any;
    filterPlainMethod?: any;
    lazyCurrent?: any;
    baseIndent?: any;
    deleteNodeMethod?: any;
    showCheckedMark?: any;
    willChangeView?: any;
    onlyCheckChildren?: any;
    showLine?: any;
}>>> & {
    "onNode-expand"?: ((...args: any[]) => any) | undefined;
    "onCurrent-change"?: ((...args: any[]) => any) | undefined;
    onCheck?: ((...args: any[]) => any) | undefined;
    "onCheck-change"?: ((...args: any[]) => any) | undefined;
    "onNode-drag-start"?: ((...args: any[]) => any) | undefined;
    "onNode-drag-enter"?: ((...args: any[]) => any) | undefined;
    "onNode-drag-over"?: ((...args: any[]) => any) | undefined;
    "onNode-drag-end"?: ((...args: any[]) => any) | undefined;
    "onNode-drop"?: ((...args: any[]) => any) | undefined;
    "onNode-click"?: ((...args: any[]) => any) | undefined;
    onCloseMenu?: ((...args: any[]) => any) | undefined;
    "onLeave-plain-view"?: ((...args: any[]) => any) | undefined;
    "onCheck-plain"?: ((...args: any[]) => any) | undefined;
    "onLoad-data"?: ((...args: any[]) => any) | undefined;
    "onNode-drag-leave"?: ((...args: any[]) => any) | undefined;
    "onAdd-node"?: ((...args: any[]) => any) | undefined;
    "onEdit-node"?: ((...args: any[]) => any) | undefined;
    "onDelete-node"?: ((...args: any[]) => any) | undefined;
    "onOpen-edit"?: ((...args: any[]) => any) | undefined;
    "onClose-edit"?: ((...args: any[]) => any) | undefined;
    "onSave-edit"?: ((...args: any[]) => any) | undefined;
}, {
    readonly props?: any;
    readonly data?: any;
    readonly size?: any;
    readonly load?: any;
    readonly checkStrictly?: any;
    readonly tiny_mode?: any;
    readonly tiny_mode_root?: any;
    readonly tiny_template?: any;
    readonly tiny_renderless?: any;
    readonly _constants?: any;
    readonly tiny_theme?: any;
    readonly tiny_chart_theme?: any;
    readonly icon?: any;
    readonly draggable?: any;
    readonly renderContent?: any;
    readonly dataset?: any;
    readonly lazy?: any;
    readonly currentNodeKey?: any;
    readonly defaultExpandedKeys?: any;
    readonly autoExpandParent?: any;
    readonly checkDescendants?: any;
    readonly filterNodeMethod?: any;
    readonly defaultCheckedKeys?: any;
    readonly afterLoad?: any;
    readonly nodeKey?: any;
    readonly defaultExpandAll?: any;
    readonly theme?: any;
    readonly accordion?: any;
    readonly parentKey?: any;
    readonly indent?: any;
    readonly viewType?: any;
    readonly allowDrag?: any;
    readonly allowDrop?: any;
    readonly checkOnClickNode?: any;
    readonly defaultExpandedKeysHighlight?: any;
    readonly emptyText?: any;
    readonly expandIcon?: any;
    readonly expandOnClickNode?: any;
    readonly highlightCurrent?: any;
    readonly iconTriggerClickNode?: any;
    readonly renderAfterExpand?: any;
    readonly showCheckbox?: any;
    readonly showContextmenu?: any;
    readonly showRadio?: any;
    readonly showNumber?: any;
    readonly collapsible?: any;
    readonly showCheckEasily?: any;
    readonly nodeHeight?: any;
    readonly shrinkIcon?: any;
    readonly expandIconColor?: any;
    readonly shrinkIconColor?: any;
    readonly deleteDisabledKeys?: any;
    readonly editDisabledKeys?: any;
    readonly addDisabledKeys?: any;
    readonly showAuxi?: any;
    readonly pathSplit?: any;
    readonly filterPlainMethod?: any;
    readonly lazyCurrent?: any;
    readonly baseIndent?: any;
    readonly deleteNodeMethod?: any;
    readonly showCheckedMark?: any;
    readonly willChangeView?: any;
    readonly onlyCheckChildren?: any;
    readonly showLine?: any;
}, {}>;
export default _default;
