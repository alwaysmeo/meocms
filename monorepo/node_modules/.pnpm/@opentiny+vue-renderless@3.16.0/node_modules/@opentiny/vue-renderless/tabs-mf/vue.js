import "../chunk-G2ADBYYC.js";
import { random } from "../common/string";
import { setActive, addItem, addNav, scrollTo, clickMore, removeItem, changeCurrentName } from "./index";
const api = ["state", "setActive", "addItem", "addNav", "scrollTo", "clickMore", "removeItem"];
const renderless = (props, { onMounted, onBeforeUnmount, provide, reactive, watch, computed }, { vm, emit }) => {
  const state = reactive({
    items: [],
    navs: [],
    currentItem: computed(() => state.items.find((item) => item.selected)),
    key: computed(() => state.currentItem ? state.currentItem.name : random()),
    separator: props.separator
  });
  const api2 = {};
  Object.assign(api2, {
    state,
    setActive: setActive({ api: api2, state, props }),
    addItem: addItem(state),
    addNav: addNav(state),
    scrollTo: scrollTo({ vm, state }),
    removeItem: removeItem({ state, emit }),
    changeCurrentName: changeCurrentName({ state, emit }),
    clickMore: clickMore(api2)
  });
  provide("tabs", vm);
  watch(
    () => props.activeName,
    (name) => name && api2.setActive(name)
  );
  watch(
    () => props.modelValue,
    (name) => name && api2.setActive(name)
  );
  onMounted(() => {
    props.activeName && api2.scrollTo(props.activeName);
    props.modelValue && api2.scrollTo(props.modelValue);
  });
  onBeforeUnmount(() => {
    state.navs.forEach((n, i) => state.navs[i] = null);
    state.navs.length = 0;
  });
  provide("separator", state.separator);
  return api2;
};
export {
  api,
  renderless
};
